{
  "links": "https://www.ycombinator.com/companies/vigilant",
  "name": "Vigilant",
  "headline": "Lightweight logging and alerting for startups",
  "batch": "S23",
  "description": "Vigilant is a lightweight tool for managing structured logs. It lets you centralize your logs, search them, and get alerted when things break. We're focused on nailing the basics so setup and debugging feels as fast and intuitive as an IDE.",
  "activity_status": "Active",
  "website": "https://vigilant.run",
  "founded_date": 2023.0,
  "team_size": 2.0,
  "location": "Columbus, OH",
  "group_partner": "Dalton Caldwell",
  "group_partner_yc": "https://www.ycombinator.com/people/dalton-caldwell",
  "company_linkedin": null,
  "company_twitter": null,
  "tags": "industry:developer-tools; industry:saas; industry:design; industry:design-tools",
  "founders": [
    {
      "name": "Ben Shumaker, Founder",
      "description": "Howdy. I'm Ben, cofounder of Vigilant. Before, I was Lead Game Designer at TempoStorm. And before that, I was a competitive strategy gamer.",
      "linkedin": "https://www.linkedin.com/in/ben-shumaker-9b2620238/"
    },
    {
      "name": "Izak Fritz, Founder",
      "description": "Founder and CTO of Vigilant.",
      "linkedin": "https://linkedin.com/in/izak-fritz-3b8579120"
    }
  ],
  "status": true,
  "markdown": "raw_markdown='[Vigilant](https://vigilant.run/</>)\\n[Docs](https://vigilant.run/<https:/docs.vigilant.run>)[Changelog](https://vigilant.run/</changelog>)[Pricing](https://vigilant.run/</pricing>)[Blog](https://vigilant.run/</blog>)[Login](https://vigilant.run/<https:/dashboard.vigilant.run/login>)[Sign up](https://vigilant.run/<https:/dashboard.vigilant.run/signup>)\\n# The fastest way to debug your app\\nSearch across all your logs instantly, get alerts when things break, and fix issues before users complain.\\n[PRESS SPACE TO START](https://vigilant.run/<https:/dashboard.vigilant.run/signup>)\\n## Unified Log Management\\nSee logs from all your services, neatly organized by environment. Full visibility, zero chaos.\\ntimestamp\\nservice\\nbody\\nJan 24 09:32:18 AM\\nclient\\n[event] Login form submitted\\nJan 24 09:32:18 AM\\napi\\n[POST] /auth/login pass:\"HUNTER22\" - rejected\\nJan 24 09:32:18 AM\\nauth\\n[fail] Invalid credentials (attempt 1/5)\\nJan 24 09:32:20 AM\\nclient\\n[event] Login form submitted... again\\nJan 24 09:32:20 AM\\napi\\n[POST] /auth/login pass:\"HUNTER22\" - rejected\\nJan 24 09:32:20 AM\\nauth\\n[fail] Nice try, but still wrong (2/5)\\nJan 24 09:32:22 AM\\nclient\\n[event] Checking Google password manager\\nJan 24 09:32:27 AM\\nclient\\n[event] They didn\\'t find it\\nJan 24 09:32:31 AM\\nclient\\n[event] Login form submitted... aggressively\\nJan 24 09:32:31 AM\\napi\\n[POST] /auth/login pass:\"HUNTER22\" - rejected\\nJan 24 09:32:31 AM\\nauth\\n[fail] Bro... you good? (3/5)\\nJan 24 09:32:33 AM\\nclient\\n[event] Click forgot password link\\nJan 24 09:32:33 AM\\napi\\n[POST] /auth/reset-password-email\\nJan 24 09:32:33 AM\\nauth\\n[info] Password reset email sent\\nJan 24 09:32:35 AM\\nclient\\n[event] New password submitted\\nJan 24 09:32:35 AM\\napi\\n[POST] /auth/reset-password pass:\"HUNTER22\" - rejected\\nJan 24 09:32:36 AM\\nauth\\n[fail] Your new password can\\'t be the same as your old one\\nJan 24 09:32:36 AM\\nclient\\n[event] Reset password submitted\\nJan 24 09:32:36 AM\\napi\\n[POST] /auth/reset-password pass:\"FUCK OFF\" - rejected\\nJan 24 09:32:36 AM\\nauth\\n[fail] Password cannot contain a space\\nJan 24 09:32:37 AM\\nclient\\n[event] Reset password submitted\\nJan 24 09:32:37 AM\\napi\\n[POST] /auth/reset-password pass:\"FUCK OFF\" - rejected\\nJan 24 09:32:37 AM\\nauth\\n[fail] lmao\\nJan 24 09:32:37 AM\\nclient\\n[event] Reset password submitted\\nJan 24 09:32:38 AM\\napi\\n[POST] /auth/reset-password pass:\"I HATE YOU\" - rejected\\nJan 24 09:32:38 AM\\nauth\\n[fail] We will never let you log in\\nJan 24 09:32:41 AM\\nclient\\n[event] Taking deep breaths\\nJan 24 09:32:43 AM\\nclient\\n[event] Turns off caps lock\\nJan 24 09:32:44 AM\\nclient\\n[event] Login form submitted\\nJan 24 09:32:44 AM\\napi\\n[POST] /auth/login pass:\"Hunter22\" - accepted\\nJan 24 09:32:44 AM\\nauth\\n[info] Login success\\nJan 24 09:32:44 AM\\nauth\\n[info] Hi Hunter, welcome back to club penguin!\\n## Intuitive Search\\nQuickly find logs by filtering on relevant attributes.\\nlevel == error\\nservice == backend\\ntime == June 12, 12:34:03\\nemail == nbushnell@atari.com\\n## Custom Alerts\\nTurn log messages and errors into instant alerts.\\n## Fast Integration\\nStart sending logs with a single code snippet. It works with existing log statements, no changes needed.\\nNode.jsPythonGoRubyRustDartC++\\n```\\nimport { Logger } from \"vigilant-js\";\\nconst logger = new Logger({\\n name: \"backend-server\",\\n endpoint: \"ingress.vigilant.run\",\\n token: \"tk_1234567890\",\\n});\\nlogger.autocapture_enable();\\nconsole.log(\"User logged in\");\\nawait logger.shutdown();\\n```\\n```\\nfrom vigilant import Logger\\nlogger = Logger(\\n  name=\"backend-server\",\\n  endpoint=\"ingress.vigilant.run\",\\n  token=\"tk_1234567890\",\\n)\\nlogger.autocapture_enable()\\nprint(\"User logged in\")\\nlogger.shutdown()\\n```\\n```\\nimport (\\n  \"github.com/vigilant-run/vigilant-golang\"\\n)\\nlogger := vigilant.NewLoggerBuilder().\\n WithName(\"backend-server\").\\n WithEndpoint(\"ingress.vigilant.run\").\\n WithToken(\"tk_1234567890\").\\n Build()\\nlogger.Info(\"User logged in\")\\nlogger.Shutdown()\\n```\\n```\\nrequire \\'vigilant-ruby\\'\\nlogger = Vigilant::Logger.new(\\n name: \\'backend-server\\',\\n endpoint: \\'ingress.vigilant.run\\',\\n token: \\'tk_1234567890\\',\\n)\\nlogger.autocapture_enable\\nputs \\'User logged in\\'\\nlogger.shutdown\\n```\\n```\\nuse vigilant::LoggerBuilder;\\nfn main() {\\n let mut logger = LoggerBuilder::new()\\n  .name(\"backend-server\")\\n  .endpoint(\"ingress.vigilant.run\")\\n  .token(\"tk_1234567890\")\\n  .build();\\n logger.info(\"User logged in\");\\n let _ = logger.shutdown();\\n}\\n```\\n```\\nimport \\'package:vigilant/vigilant.dart\\';\\nfinal logger = Logger(\\n name: \"backend-server\",\\n endpoint: \"ingress.vigilant.run\",\\n token: \"tk_1234567890\",\\n);\\nlogger.info(\"User logged in\");\\nawait logger.shutdown();\\n```\\n```\\n#include \"vigilant/logger.h\"\\nint main()\\n{\\n Logger logger = LoggerBuilder()\\n          .withName(\"backend-server\")\\n          .withToken(\"tk_1234567890\")\\n          .build();\\n logger.info(\"User logged in\"); \\n logger.shutdown();\\n return 0;\\n}\\n```\\n\\n### Easy Setup\\nIt\\'s 10 minutes and 10 lines of code.\\n### Free to try\\nYou don\\'t even need a credit card.\\n### Self Serve\\nNo need to talk to a human.\\n### Risk Free\\nThis is the part where you try it.\\n[Sure, why not?](https://vigilant.run/<https:/dashboard.vigilant.run/signup>)\\n### Click the yellow square to get started.\\n[](https://vigilant.run/<https:/dashboard.vigilant.run/signup>)\\n[Vigilant](https://vigilant.run/</>)\\nBacked by\\nCombinator\\n© 2023 AutoEmber, Inc.\\nDocs\\n[Overview](https://vigilant.run/<https:/docs.vigilant.run/overview>)[Node.js](https://vigilant.run/<https:/docs.vigilant.run/logging/nodejs>)[Python](https://vigilant.run/<https:/docs.vigilant.run/logging/python>)[Go](https://vigilant.run/<https:/docs.vigilant.run/logging/go>)\\nSocial\\n[GitHub](https://vigilant.run/<https:/github.com/vigilant-run>)[Discord](https://vigilant.run/<https:/discord.com/invite/Kr9YR2XUqr>)[LinkedIn](https://vigilant.run/<https:/www.linkedin.com/company/vigilantrun/>)\\nLegal\\n[Terms of Service](https://vigilant.run/</terms>)[Privacy Policy](https://vigilant.run/</privacy>)\\n' markdown_with_citations='Vigilant⟨1⟩\\nDocs⟨2⟩Changelog⟨3⟩Pricing⟨4⟩Blog⟨5⟩Login⟨6⟩Sign up⟨7⟩\\n# The fastest way to debug your app\\nSearch across all your logs instantly, get alerts when things break, and fix issues before users complain.\\nPRESS SPACE TO START⟨7⟩\\n## Unified Log Management\\nSee logs from all your services, neatly organized by environment. Full visibility, zero chaos.\\ntimestamp\\nservice\\nbody\\nJan 24 09:32:18 AM\\nclient\\n[event] Login form submitted\\nJan 24 09:32:18 AM\\napi\\n[POST] /auth/login pass:\"HUNTER22\" - rejected\\nJan 24 09:32:18 AM\\nauth\\n[fail] Invalid credentials (attempt 1/5)\\nJan 24 09:32:20 AM\\nclient\\n[event] Login form submitted... again\\nJan 24 09:32:20 AM\\napi\\n[POST] /auth/login pass:\"HUNTER22\" - rejected\\nJan 24 09:32:20 AM\\nauth\\n[fail] Nice try, but still wrong (2/5)\\nJan 24 09:32:22 AM\\nclient\\n[event] Checking Google password manager\\nJan 24 09:32:27 AM\\nclient\\n[event] They didn\\'t find it\\nJan 24 09:32:31 AM\\nclient\\n[event] Login form submitted... aggressively\\nJan 24 09:32:31 AM\\napi\\n[POST] /auth/login pass:\"HUNTER22\" - rejected\\nJan 24 09:32:31 AM\\nauth\\n[fail] Bro... you good? (3/5)\\nJan 24 09:32:33 AM\\nclient\\n[event] Click forgot password link\\nJan 24 09:32:33 AM\\napi\\n[POST] /auth/reset-password-email\\nJan 24 09:32:33 AM\\nauth\\n[info] Password reset email sent\\nJan 24 09:32:35 AM\\nclient\\n[event] New password submitted\\nJan 24 09:32:35 AM\\napi\\n[POST] /auth/reset-password pass:\"HUNTER22\" - rejected\\nJan 24 09:32:36 AM\\nauth\\n[fail] Your new password can\\'t be the same as your old one\\nJan 24 09:32:36 AM\\nclient\\n[event] Reset password submitted\\nJan 24 09:32:36 AM\\napi\\n[POST] /auth/reset-password pass:\"FUCK OFF\" - rejected\\nJan 24 09:32:36 AM\\nauth\\n[fail] Password cannot contain a space\\nJan 24 09:32:37 AM\\nclient\\n[event] Reset password submitted\\nJan 24 09:32:37 AM\\napi\\n[POST] /auth/reset-password pass:\"FUCK OFF\" - rejected\\nJan 24 09:32:37 AM\\nauth\\n[fail] lmao\\nJan 24 09:32:37 AM\\nclient\\n[event] Reset password submitted\\nJan 24 09:32:38 AM\\napi\\n[POST] /auth/reset-password pass:\"I HATE YOU\" - rejected\\nJan 24 09:32:38 AM\\nauth\\n[fail] We will never let you log in\\nJan 24 09:32:41 AM\\nclient\\n[event] Taking deep breaths\\nJan 24 09:32:43 AM\\nclient\\n[event] Turns off caps lock\\nJan 24 09:32:44 AM\\nclient\\n[event] Login form submitted\\nJan 24 09:32:44 AM\\napi\\n[POST] /auth/login pass:\"Hunter22\" - accepted\\nJan 24 09:32:44 AM\\nauth\\n[info] Login success\\nJan 24 09:32:44 AM\\nauth\\n[info] Hi Hunter, welcome back to club penguin!\\n## Intuitive Search\\nQuickly find logs by filtering on relevant attributes.\\nlevel == error\\nservice == backend\\ntime == June 12, 12:34:03\\nemail == nbushnell@atari.com\\n## Custom Alerts\\nTurn log messages and errors into instant alerts.\\n## Fast Integration\\nStart sending logs with a single code snippet. It works with existing log statements, no changes needed.\\nNode.jsPythonGoRubyRustDartC++\\n```\\nimport { Logger } from \"vigilant-js\";\\nconst logger = new Logger({\\n name: \"backend-server\",\\n endpoint: \"ingress.vigilant.run\",\\n token: \"tk_1234567890\",\\n});\\nlogger.autocapture_enable();\\nconsole.log(\"User logged in\");\\nawait logger.shutdown();\\n```\\n```\\nfrom vigilant import Logger\\nlogger = Logger(\\n  name=\"backend-server\",\\n  endpoint=\"ingress.vigilant.run\",\\n  token=\"tk_1234567890\",\\n)\\nlogger.autocapture_enable()\\nprint(\"User logged in\")\\nlogger.shutdown()\\n```\\n```\\nimport (\\n  \"github.com/vigilant-run/vigilant-golang\"\\n)\\nlogger := vigilant.NewLoggerBuilder().\\n WithName(\"backend-server\").\\n WithEndpoint(\"ingress.vigilant.run\").\\n WithToken(\"tk_1234567890\").\\n Build()\\nlogger.Info(\"User logged in\")\\nlogger.Shutdown()\\n```\\n```\\nrequire \\'vigilant-ruby\\'\\nlogger = Vigilant::Logger.new(\\n name: \\'backend-server\\',\\n endpoint: \\'ingress.vigilant.run\\',\\n token: \\'tk_1234567890\\',\\n)\\nlogger.autocapture_enable\\nputs \\'User logged in\\'\\nlogger.shutdown\\n```\\n```\\nuse vigilant::LoggerBuilder;\\nfn main() {\\n let mut logger = LoggerBuilder::new()\\n  .name(\"backend-server\")\\n  .endpoint(\"ingress.vigilant.run\")\\n  .token(\"tk_1234567890\")\\n  .build();\\n logger.info(\"User logged in\");\\n let _ = logger.shutdown();\\n}\\n```\\n```\\nimport \\'package:vigilant/vigilant.dart\\';\\nfinal logger = Logger(\\n name: \"backend-server\",\\n endpoint: \"ingress.vigilant.run\",\\n token: \"tk_1234567890\",\\n);\\nlogger.info(\"User logged in\");\\nawait logger.shutdown();\\n```\\n```\\n#include \"vigilant/logger.h\"\\nint main()\\n{\\n Logger logger = LoggerBuilder()\\n          .withName(\"backend-server\")\\n          .withToken(\"tk_1234567890\")\\n          .build();\\n logger.info(\"User logged in\"); \\n logger.shutdown();\\n return 0;\\n}\\n```\\n\\n### Easy Setup\\nIt\\'s 10 minutes and 10 lines of code.\\n### Free to try\\nYou don\\'t even need a credit card.\\n### Self Serve\\nNo need to talk to a human.\\n### Risk Free\\nThis is the part where you try it.\\nSure, why not?⟨7⟩\\n### Click the yellow square to get started.\\n[](https://vigilant.run/<https:/dashboard.vigilant.run/signup>)\\nVigilant⟨1⟩\\nBacked by\\nCombinator\\n© 2023 AutoEmber, Inc.\\nDocs\\nOverview⟨8⟩Node.js⟨9⟩Python⟨10⟩Go⟨11⟩\\nSocial\\nGitHub⟨12⟩Discord⟨13⟩LinkedIn⟨14⟩\\nLegal\\nTerms of Service⟨15⟩Privacy Policy⟨16⟩\\n' references_markdown='\\n\\n## References\\n\\n⟨1⟩ https://vigilant.run/</>: Vigilant\\n⟨2⟩ https://vigilant.run/<https:/docs.vigilant.run>: Docs\\n⟨3⟩ https://vigilant.run/</changelog>: Changelog\\n⟨4⟩ https://vigilant.run/</pricing>: Pricing\\n⟨5⟩ https://vigilant.run/</blog>: Blog\\n⟨6⟩ https://vigilant.run/<https:/dashboard.vigilant.run/login>: Login\\n⟨7⟩ https://vigilant.run/<https:/dashboard.vigilant.run/signup>: Sign up\\n⟨8⟩ https://vigilant.run/<https:/docs.vigilant.run/overview>: Overview\\n⟨9⟩ https://vigilant.run/<https:/docs.vigilant.run/logging/nodejs>: Node.js\\n⟨10⟩ https://vigilant.run/<https:/docs.vigilant.run/logging/python>: Python\\n⟨11⟩ https://vigilant.run/<https:/docs.vigilant.run/logging/go>: Go\\n⟨12⟩ https://vigilant.run/<https:/github.com/vigilant-run>: GitHub\\n⟨13⟩ https://vigilant.run/<https:/discord.com/invite/Kr9YR2XUqr>: Discord\\n⟨14⟩ https://vigilant.run/<https:/www.linkedin.com/company/vigilantrun/>: LinkedIn\\n⟨15⟩ https://vigilant.run/</terms>: Terms of Service\\n⟨16⟩ https://vigilant.run/</privacy>: Privacy Policy\\n' fit_markdown='' fit_html=''",
  "generated_description": "**Vigilant: The Startup-Friendly Logging Tool**\n\nFounded in 2023 and hailing from Columbus, OH, Vigilant is on a mission to simplify logging and alerting for startups. Their product is all about lightweight log management – think of it as a centralized hub where you can view, search, and get alerts on structured logs without the technical headache. \n\nVigilant is designed to feel as intuitive as an integrated development environment (IDE), so developers can focus on what really matters: building great products. The tool enables users to instantly search through logs, receive alerts when things go sideways, and even debug before users start complaining. The founders have put a premium on nailing the basics—easy setup, seamless integration, and intuitive UI. \n\n### Why Vigilant Stands Out\n\n- **Unified Log Management:** Organize logs from multiple services by environment, ensuring full visibility and minimal chaos.\n- **Intuitive Search:** Quickly filter logs by various attributes—no more endless scrolls to find what's broken.\n- **Custom Alerts:** Get notified about important log messages or errors in real-time.\n- **Simple Integration:** Just a single code snippet, and you're ready to roll. It accommodates existing logging setups without requiring major changes—works with popular languages like Node.js, Python, and Go.\n\n### The Team & Backers\n\nWith a lean team of just two, Vigilant is backed by Dalton Caldwell as their Group Partner from Y Combinator's Batch S23. Their vision is substantial, but they're tackling it step by step, focusing on startups that need a foolproof way to manage logs without diving into overly complex systems.\n\n### Pricing & Availability\n\nVigilant offers a free trial without requiring a credit card, making it accessible for developers to get hands-on with their tool. And with no human interaction necessary for the setup – it's self-serve all the way. \n\nIf you’re interested in learning more or trying it out, visit their site at [Vigilant](https://vigilant.run) and see how they can help you streamline your logging process. \n\nIn the fast-moving startup world, tools like Vigilant that simplify fundamental tasks can make a real difference. They focus on creating a product that fits seamlessly into the developer workflow while keeping things straightforward and reliable."
}