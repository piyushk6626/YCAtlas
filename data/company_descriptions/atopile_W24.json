{
  "links": "https://www.ycombinator.com/companies/atopile",
  "name": "atopile",
  "headline": "We make tools to design electronics circuit boards with code",
  "batch": "W24",
  "description": "atopile is a new language to design electronic circuit boards with code. We replace point and click graphical interfaces with code to bring software level automation and reuse to the field of hardware design. Our project is open source on GitHub! https://github.com/atopile/atopile",
  "activity_status": "Active",
  "website": "http://atopile.io",
  "founded_date": 2023.0,
  "team_size": 3.0,
  "location": "San Francisco",
  "group_partner": "Jared Friedman",
  "group_partner_yc": "https://www.ycombinator.com/people/jared-friedman",
  "company_linkedin": null,
  "company_twitter": null,
  "tags": "industry:hardware; industry:saas; industry:design-tools; industry:electronics; location:san-francisco-bay-area",
  "founders": [
    {
      "name": "Matt Wildoer, Founder",
      "description": "Co-founder of atopile. Formerly SWE @ Tesla, Mech Eng @ Lilium",
      "linkedin": "https://linkedin.com/in/matthew-wildoer-467a4992"
    },
    {
      "name": "Narayan Powderly, Founder",
      "description": "If something sucks, fix it. I love building tools that solve real problems, at Tesla I increased the rate at which we could build prototypes by 10x, at our company atopile we are making tools to bring the speed of software development to hardware engineering.",
      "linkedin": "https://linkedin.com/in/narayan-powderly-21949a180"
    }
  ],
  "status": true,
  "markdown": "raw_markdown='[ Skip to content ](http://atopile.io/<#getting-started>)\\nFor updates, star us on [ **GitHub** ](http://atopile.io/<https:/github.com/atopile/atopile>) , and follow **@atopile_io** on [ **X** (Twitter) ](http://atopile.io/<https:/twitter.com/atopile_io>) , [ **YouTube** , or join us on ](http://atopile.io/<https:/www.youtube.com/@atopile_io>)[ **Discord** ](http://atopile.io/<https:/discord.gg/nkpC7wYRVw>)\\nYou\\'re not viewing the latest version. [ **Click here to go to latest.** ](http://atopile.io/<../.>)\\n[ ![logo](http://atopile.io/assets/logo/ato_logo_256x256.png) ](http://atopile.io/<.> \"atopile\")\\natopile \\n0.2.69\\n  * [dev](http://atopile.io/<https:/docs.atopile.io/dev/>)\\n  * [0.2.69](http://atopile.io/<https:/docs.atopile.io/0.2.69/>)\\n\\n\\nGetting started \\nInitializing search \\n[ atopile/atopile  ](http://atopile.io/<https:/github.com/atopile/atopile> \"Go to repository\")\\n  * [ Docs ](http://atopile.io/<.>)\\n  * [ Development ](http://atopile.io/<development/>)\\n  * [ Packages ](http://atopile.io/<https:/packages.atopile.io>)\\n  * [ Example Projects ](http://atopile.io/<spin/>)\\n  * [ Blog ](http://atopile.io/<blog/>)\\n\\n\\n[ ![logo](http://atopile.io/assets/logo/ato_logo_256x256.png) ](http://atopile.io/<.> \"atopile\") atopile \\n[ atopile/atopile  ](http://atopile.io/<https:/github.com/atopile/atopile> \"Go to repository\")\\n  * Docs  Docs \\n    * Getting started  [ Getting started  ](http://atopile.io/<.>) Table of contents \\n      * [ Overview  ](http://atopile.io/<#overview>)\\n      * [ Installation  ](http://atopile.io/<#installation>)\\n        * [ atopile compiler — with uv (recommended)  ](http://atopile.io/<#atopile-compiler-with-uv-recommended>)\\n        * [ atopile compiler — for development  ](http://atopile.io/<#atopile-compiler-for-development>)\\n        * [ VSCode extension - extension store  ](http://atopile.io/<#vscode-extension-extension-store>)\\n          * [ 1. - Easy  ](http://atopile.io/<#1-easy>)\\n          * [ 2. - Harder  ](http://atopile.io/<#2-harder>)\\n      * [ Making a simple circuit  ](http://atopile.io/<#making-a-simple-circuit>)\\n    * [ Creating an ato project  ](http://atopile.io/<first_project/>)\\n    * [ Project configuration  ](http://atopile.io/<config/>)\\n    * [ Building your ato project  ](http://atopile.io/<building/>)\\n    * [ Install dependencies  ](http://atopile.io/<install/>)\\n    * [ Imports  ](http://atopile.io/<import/>)\\n    * [ Basic types & Connections  ](http://atopile.io/<types/>)\\n    * [ Class, subclass and replace  ](http://atopile.io/<class/>)\\n    * [ Units and tolerances, assertions and maths  ](http://atopile.io/<maths/>)\\n    * [ Automatic selection of components  ](http://atopile.io/<component_selection/>)\\n    * [ Doc-strings  ](http://atopile.io/<doc-strings/>)\\n    * [ How-Tos  ](http://atopile.io/<how-to/>)\\n    * View your project  View your project \\n      * [ atopile viewer  ](http://atopile.io/<view/>)\\n    * Layout on kicad  Layout on kicad \\n      * [ KiCAD layout  ](http://atopile.io/<kicad/>)\\n    * Version control / Manufacturing  Version control / Manufacturing \\n      * [ Version control using git  ](http://atopile.io/<git/>)\\n      * [ Generation of build outputs  ](http://atopile.io/<ci/>)\\n  * Development  Development \\n    * [ Development Guide  ](http://atopile.io/<development/>)\\n    * [ Roadmap  ](http://atopile.io/<roadmap/>)\\n    * API Reference  API Reference \\n      * [ CLI  ](http://atopile.io/<api/cli/>)\\n      * [ Solver  ](http://atopile.io/<api/solver/>)\\n  * [ Packages  ](http://atopile.io/<https:/packages.atopile.io>)\\n  * Example Projects  Example Projects \\n    * [ SPIN  ](http://atopile.io/<spin/>)\\n    * [ Swoop  ](http://atopile.io/<swoop/>)\\n  * Blog  Blog \\n    * [ Blog  ](http://atopile.io/<blog/>)\\n    * Archive  Archive \\n      * [ 2024  ](http://atopile.io/<blog/archive/2024/>)\\n    * Categories  Categories \\n      * [ About us  ](http://atopile.io/<blog/category/about-us/>)\\n      * [ Future  ](http://atopile.io/<blog/category/future/>)\\n      * [ Release  ](http://atopile.io/<blog/category/release/>)\\n\\n\\nTable of contents \\n  * [ Overview  ](http://atopile.io/<#overview>)\\n  * [ Installation  ](http://atopile.io/<#installation>)\\n    * [ atopile compiler — with uv (recommended)  ](http://atopile.io/<#atopile-compiler-with-uv-recommended>)\\n    * [ atopile compiler — for development  ](http://atopile.io/<#atopile-compiler-for-development>)\\n    * [ VSCode extension - extension store  ](http://atopile.io/<#vscode-extension-extension-store>)\\n      * [ 1. - Easy  ](http://atopile.io/<#1-easy>)\\n      * [ 2. - Harder  ](http://atopile.io/<#2-harder>)\\n  * [ Making a simple circuit  ](http://atopile.io/<#making-a-simple-circuit>)\\n\\n\\n# Getting started[¶](http://atopile.io/<#getting-started> \"Permanent link\")\\n`atopile` brings the best of software development to the world of hardware design.\\nWe\\'re starting with an electronics compiler and a new language called `ato`. Files with the `.ato` extension can be used to describe your circuit, and compiles it to netlists that can be laid out and fabricated.\\nThe `.ato` files are human readable and can be version controlled, so you can collaborate with your team on the design of your hardware. They\\'re modular, so you can reuse components from other projects, and share them with the community. They provide a way to save the intelligence of your design and the validation required to make sure it works as intended, so you can be confident that your design will work as expected.\\n## Overview[¶](http://atopile.io/<#overview> \"Permanent link\")\\n  1. **Install tools** : See the install section below.\\n  2. **Project Setup** : For instructions on creating a new ato project from the command line, refer to [ato create](http://atopile.io/<first_project/#with-ato-create-recommended>)). Highly recommended to use GitHub to store and version your project.\\n  3. **Install Packages** : For detailed instructions on finding and installing pre-made packages for your project, refer to the [installation guide](http://atopile.io/<install/>).\\n  4. **Circuit Design with Code** : Hook up your circuit features using the expressive `ato` language, transforming your design ideas into precise, codified representations.\\n  5. **Version Control** : Commit and merge your features using git, iterating through the design process by repeating the steps of adding features and refining your design.\\n  6. **Build and Export** : Use `ato build` to compile your design into a netlist, which can then be imported into KiCAD for layout.\\n  7. **Sync and Layout** : Import netlist into the linked kicad project. Our packages installed from packages.atopile.io have a linked layout that you can reuse verbatim or as a known good starting point for your design. [Layout reuse in atopile](http://atopile.io/<https:/www.youtube.com/watch?v=UBwlARJWZ40>)\\n  8. **Finalize and Order** : Commit and merge your layout changes, then download the CI build of your design to order your custom PCB from JLCPCB.\\n\\n\\n## Installation[¶](http://atopile.io/<#installation> \"Permanent link\")\\nTo run atopile, you will need the atopile compiler, the VSCode extension for syntax highlighting and git credential manager.\\n### atopile compiler — with `uv` (recommended)[¶](http://atopile.io/<#atopile-compiler-with-uv-recommended> \"Permanent link\")\\natopile is published as a [python package](http://atopile.io/<https:/pypi.org/project/atopile/>) on pypi. You can install it using `uv` from your command line.\\nIt\\'s dead simple with `uv`[](http://atopile.io/<https:/docs.astral.sh/uv/>)\\n```\\n[](http://atopile.io/<#__codelineno-0-1>)uvtoolinstallatopile\\n\\n```\\n\\nRun `ato --version` to ensure the install worked. You might need to open a new terminal window for the `ato` command to be recognized.\\nHow do I install `uv`?\\n`uv` has some dead simple installation instructions here: <https://docs.astral.sh/uv/installation/>\\natopile should be installed. You can verify that it worked with the following command which should give you the current version of atopile. \\n```\\n[](http://atopile.io/<#__codelineno-1-1>)ato--version\\n\\n```\\n\\n**[Getting started with atopile - get setup and build your first project from scratch](http://atopile.io/<https:/www.youtube.com/watch?v=7aeZLlA_VYA>)** – 32m – We have a video of how to install atopile and setup your project here.\\n### atopile compiler — for development[¶](http://atopile.io/<#atopile-compiler-for-development> \"Permanent link\")\\natopile can be directly installed from [GitHub](http://atopile.io/<https:/github.com/atopile/atopile>) by cloning the repository into a subfolder of your project root. This could be useful if you want to use the latest version of atopile:\\nStart by making sure you have `uv` installed on your machine.\\n```\\n[](http://atopile.io/<#__codelineno-2-1>)gitclonehttps://github.com/atopile/atopile.git\\n\\n```\\n\\nThis will create a repository with the latest version of atopile. You can install it using `uv`:\\n```\\n[](http://atopile.io/<#__codelineno-3-1>)uvsync--dev\\n\\n```\\n\\nActivate the venv: \\n```\\n[](http://atopile.io/<#__codelineno-4-1>)source.venv/bin/activate\\n\\n```\\n\\n### VSCode extension - extension store[¶](http://atopile.io/<#vscode-extension-extension-store> \"Permanent link\")\\nWe recommend using [VSCode](http://atopile.io/<https:/code.visualstudio.com>) to run atopile as it will provide syntax highlighting.\\nFrom VSCode, navigate to the VSCode extensions and install atopile.\\n![](http://atopile.io/assets/images/ato_extension.png)\\nThe extension needs to know where your ato compiler\\'s python interpreter is located. There are two ways to do this:\\n#### 1. - Easy[¶](http://atopile.io/<#1-easy> \"Permanent link\")\\nIf `ato` is in your PATH, the extension will find it automatically.\\n#### 2. - Harder[¶](http://atopile.io/<#2-harder> \"Permanent link\")\\nIf not, you can set the `atopile.interpreter` setting in your vscode settings to the path of the `ato` executable. eg. in your `settings.json` (): \\n```\\n[](http://atopile.io/<#__codelineno-5-1>){\\n[](http://atopile.io/<#__codelineno-5-2>)\"atopile.interpreter\":[\"/path/to/the/python/interpreter/used/for/ato\"]\\n[](http://atopile.io/<#__codelineno-5-3>)}\\n\\n```\\n\\nYou can find `/path/to/the/python/interpreter/used/for/ato` by running `ato --python-path` in your terminal, where `ato` is available.\\n## Making a simple circuit[¶](http://atopile.io/<#making-a-simple-circuit> \"Permanent link\")\\nTo get you started quickly, here is an example of a simple atopile circuit. See the rest of the documentation on how to fully use the atopile language features.\\nLet\\'s build a voltage divider. Start by invoking `ato create` to create a new project.\\nOnce created, open elec/src/your-project.ato and modify it in the following way:\\n[your-project.ato](http://atopile.io/<#making-a-simple-circuit-your-projectato>)\\n```\\n[](http://atopile.io/<#__codelineno-6-1>)from \"generics/resistors.ato\" import Resistor\\n[](http://atopile.io/<#__codelineno-6-2>)\\n[](http://atopile.io/<#__codelineno-6-3>)module VoltageDivider:\\n[](http://atopile.io/<#__codelineno-6-4>)  signal top\\n[](http://atopile.io/<#__codelineno-6-5>)  signal out\\n[](http://atopile.io/<#__codelineno-6-6>)  signal bottom\\n[](http://atopile.io/<#__codelineno-6-7>)\\n[](http://atopile.io/<#__codelineno-6-8>)  r_top = new Resistor\\n[](http://atopile.io/<#__codelineno-6-9>)  r_top.footprint = \"R0402\"\\n[](http://atopile.io/<#__codelineno-6-10>)  r_top.value = 100kohm +/- 10%\\n[](http://atopile.io/<#__codelineno-6-11>)\\n[](http://atopile.io/<#__codelineno-6-12>)  r_bottom = new Resistor\\n[](http://atopile.io/<#__codelineno-6-13>)  r_bottom.footprint = \"R0402\"\\n[](http://atopile.io/<#__codelineno-6-14>)  r_bottom.value = 200kohm +/- 10%\\n[](http://atopile.io/<#__codelineno-6-15>)\\n[](http://atopile.io/<#__codelineno-6-16>)  top ~ r_top.p1; r_top.p2 ~ out\\n[](http://atopile.io/<#__codelineno-6-17>)  out ~ r_bottom.p1; r_bottom.p2 ~ bottom\\n\\n```\\n\\nNow you can build this project and get a voltage divider!\\nTip\\nThe generics library should be installed by default in `your-project/.ato/modules/generics` directory. If not, run `ato install generics`\\n[ Next  Creating an ato project  ](http://atopile.io/<first_project/>)\\n[ ](http://atopile.io/<https:/discord.gg/XQ34te6NZN> \"discord.gg\") [ ](http://atopile.io/<https:/github.com/atopile/atopile> \"github.com\") [ ](http://atopile.io/<https:/twitter.com/atopile_io> \"twitter.com\")\\n' markdown_with_citations=' Skip to content ⟨1⟩\\nFor updates, star us on  **GitHub** ⟨2⟩ , and follow **@atopile_io** on  **X** (Twitter) ⟨3⟩ ,  **YouTube** , or join us on ⟨4⟩ **Discord** ⟨5⟩\\nYou\\'re not viewing the latest version.  **Click here to go to latest.** ⟨6⟩\\n ![logo⟨7⟩ ](http://atopile.io/<.> \"atopile\")\\natopile \\n0.2.69\\n  * dev⟨8⟩\\n  * 0.2.69⟨9⟩\\n\\n\\nGetting started \\nInitializing search \\n atopile/atopile  ⟨2⟩\\n  *  Docs ⟨10⟩\\n  *  Development ⟨11⟩\\n  *  Packages ⟨12⟩\\n  *  Example Projects ⟨13⟩\\n  *  Blog ⟨14⟩\\n\\n\\n ![logo⟨7⟩ ](http://atopile.io/<.> \"atopile\") atopile \\n atopile/atopile  ⟨2⟩\\n  * Docs  Docs \\n    * Getting started   Getting started  ⟨10⟩ Table of contents \\n      *  Overview  ⟨15⟩\\n      *  Installation  ⟨16⟩\\n        *  atopile compiler — with uv (recommended)  ⟨17⟩\\n        *  atopile compiler — for development  ⟨18⟩\\n        *  VSCode extension - extension store  ⟨19⟩\\n          *  1. - Easy  ⟨20⟩\\n          *  2. - Harder  ⟨21⟩\\n      *  Making a simple circuit  ⟨22⟩\\n    *  Creating an ato project  ⟨23⟩\\n    *  Project configuration  ⟨24⟩\\n    *  Building your ato project  ⟨25⟩\\n    *  Install dependencies  ⟨26⟩\\n    *  Imports  ⟨27⟩\\n    *  Basic types & Connections  ⟨28⟩\\n    *  Class, subclass and replace  ⟨29⟩\\n    *  Units and tolerances, assertions and maths  ⟨30⟩\\n    *  Automatic selection of components  ⟨31⟩\\n    *  Doc-strings  ⟨32⟩\\n    *  How-Tos  ⟨33⟩\\n    * View your project  View your project \\n      *  atopile viewer  ⟨34⟩\\n    * Layout on kicad  Layout on kicad \\n      *  KiCAD layout  ⟨35⟩\\n    * Version control / Manufacturing  Version control / Manufacturing \\n      *  Version control using git  ⟨36⟩\\n      *  Generation of build outputs  ⟨37⟩\\n  * Development  Development \\n    *  Development Guide  ⟨11⟩\\n    *  Roadmap  ⟨38⟩\\n    * API Reference  API Reference \\n      *  CLI  ⟨39⟩\\n      *  Solver  ⟨40⟩\\n  *  Packages  ⟨12⟩\\n  * Example Projects  Example Projects \\n    *  SPIN  ⟨13⟩\\n    *  Swoop  ⟨41⟩\\n  * Blog  Blog \\n    *  Blog  ⟨14⟩\\n    * Archive  Archive \\n      *  2024  ⟨42⟩\\n    * Categories  Categories \\n      *  About us  ⟨43⟩\\n      *  Future  ⟨44⟩\\n      *  Release  ⟨45⟩\\n\\n\\nTable of contents \\n  *  Overview  ⟨15⟩\\n  *  Installation  ⟨16⟩\\n    *  atopile compiler — with uv (recommended)  ⟨17⟩\\n    *  atopile compiler — for development  ⟨18⟩\\n    *  VSCode extension - extension store  ⟨19⟩\\n      *  1. - Easy  ⟨20⟩\\n      *  2. - Harder  ⟨21⟩\\n  *  Making a simple circuit  ⟨22⟩\\n\\n\\n# Getting started¶⟨1⟩\\n`atopile` brings the best of software development to the world of hardware design.\\nWe\\'re starting with an electronics compiler and a new language called `ato`. Files with the `.ato` extension can be used to describe your circuit, and compiles it to netlists that can be laid out and fabricated.\\nThe `.ato` files are human readable and can be version controlled, so you can collaborate with your team on the design of your hardware. They\\'re modular, so you can reuse components from other projects, and share them with the community. They provide a way to save the intelligence of your design and the validation required to make sure it works as intended, so you can be confident that your design will work as expected.\\n## Overview¶⟨15⟩\\n  1. **Install tools** : See the install section below.\\n  2. **Project Setup** : For instructions on creating a new ato project from the command line, refer to ato create⟨46⟩). Highly recommended to use GitHub to store and version your project.\\n  3. **Install Packages** : For detailed instructions on finding and installing pre-made packages for your project, refer to the installation guide⟨26⟩.\\n  4. **Circuit Design with Code** : Hook up your circuit features using the expressive `ato` language, transforming your design ideas into precise, codified representations.\\n  5. **Version Control** : Commit and merge your features using git, iterating through the design process by repeating the steps of adding features and refining your design.\\n  6. **Build and Export** : Use `ato build` to compile your design into a netlist, which can then be imported into KiCAD for layout.\\n  7. **Sync and Layout** : Import netlist into the linked kicad project. Our packages installed from packages.atopile.io have a linked layout that you can reuse verbatim or as a known good starting point for your design. Layout reuse in atopile⟨47⟩\\n  8. **Finalize and Order** : Commit and merge your layout changes, then download the CI build of your design to order your custom PCB from JLCPCB.\\n\\n\\n## Installation¶⟨16⟩\\nTo run atopile, you will need the atopile compiler, the VSCode extension for syntax highlighting and git credential manager.\\n### atopile compiler — with `uv` (recommended)¶⟨17⟩\\natopile is published as a python package⟨48⟩ on pypi. You can install it using `uv` from your command line.\\nIt\\'s dead simple with `uv`[](http://atopile.io/<https:/docs.astral.sh/uv/>)\\n```\\n[](http://atopile.io/<#__codelineno-0-1>)uvtoolinstallatopile\\n\\n```\\n\\nRun `ato --version` to ensure the install worked. You might need to open a new terminal window for the `ato` command to be recognized.\\nHow do I install `uv`?\\n`uv` has some dead simple installation instructions here: <https://docs.astral.sh/uv/installation/>\\natopile should be installed. You can verify that it worked with the following command which should give you the current version of atopile. \\n```\\n[](http://atopile.io/<#__codelineno-1-1>)ato--version\\n\\n```\\n\\n**Getting started with atopile - get setup and build your first project from scratch⟨49⟩** – 32m – We have a video of how to install atopile and setup your project here.\\n### atopile compiler — for development¶⟨18⟩\\natopile can be directly installed from GitHub⟨2⟩ by cloning the repository into a subfolder of your project root. This could be useful if you want to use the latest version of atopile:\\nStart by making sure you have `uv` installed on your machine.\\n```\\n[](http://atopile.io/<#__codelineno-2-1>)gitclonehttps://github.com/atopile/atopile.git\\n\\n```\\n\\nThis will create a repository with the latest version of atopile. You can install it using `uv`:\\n```\\n[](http://atopile.io/<#__codelineno-3-1>)uvsync--dev\\n\\n```\\n\\nActivate the venv: \\n```\\n[](http://atopile.io/<#__codelineno-4-1>)source.venv/bin/activate\\n\\n```\\n\\n### VSCode extension - extension store¶⟨19⟩\\nWe recommend using VSCode⟨50⟩ to run atopile as it will provide syntax highlighting.\\nFrom VSCode, navigate to the VSCode extensions and install atopile.\\n![](http://atopile.io/assets/images/ato_extension.png)\\nThe extension needs to know where your ato compiler\\'s python interpreter is located. There are two ways to do this:\\n#### 1. - Easy¶⟨20⟩\\nIf `ato` is in your PATH, the extension will find it automatically.\\n#### 2. - Harder¶⟨21⟩\\nIf not, you can set the `atopile.interpreter` setting in your vscode settings to the path of the `ato` executable. eg. in your `settings.json` (): \\n```\\n[](http://atopile.io/<#__codelineno-5-1>){\\n[](http://atopile.io/<#__codelineno-5-2>)\"atopile.interpreter\":[\"/path/to/the/python/interpreter/used/for/ato\"]\\n[](http://atopile.io/<#__codelineno-5-3>)}\\n\\n```\\n\\nYou can find `/path/to/the/python/interpreter/used/for/ato` by running `ato --python-path` in your terminal, where `ato` is available.\\n## Making a simple circuit¶⟨22⟩\\nTo get you started quickly, here is an example of a simple atopile circuit. See the rest of the documentation on how to fully use the atopile language features.\\nLet\\'s build a voltage divider. Start by invoking `ato create` to create a new project.\\nOnce created, open elec/src/your-project.ato and modify it in the following way:\\nyour-project.ato⟨51⟩\\n```\\n[](http://atopile.io/<#__codelineno-6-1>)from \"generics/resistors.ato\" import Resistor\\n[](http://atopile.io/<#__codelineno-6-2>)\\n[](http://atopile.io/<#__codelineno-6-3>)module VoltageDivider:\\n[](http://atopile.io/<#__codelineno-6-4>)  signal top\\n[](http://atopile.io/<#__codelineno-6-5>)  signal out\\n[](http://atopile.io/<#__codelineno-6-6>)  signal bottom\\n[](http://atopile.io/<#__codelineno-6-7>)\\n[](http://atopile.io/<#__codelineno-6-8>)  r_top = new Resistor\\n[](http://atopile.io/<#__codelineno-6-9>)  r_top.footprint = \"R0402\"\\n[](http://atopile.io/<#__codelineno-6-10>)  r_top.value = 100kohm +/- 10%\\n[](http://atopile.io/<#__codelineno-6-11>)\\n[](http://atopile.io/<#__codelineno-6-12>)  r_bottom = new Resistor\\n[](http://atopile.io/<#__codelineno-6-13>)  r_bottom.footprint = \"R0402\"\\n[](http://atopile.io/<#__codelineno-6-14>)  r_bottom.value = 200kohm +/- 10%\\n[](http://atopile.io/<#__codelineno-6-15>)\\n[](http://atopile.io/<#__codelineno-6-16>)  top ~ r_top.p1; r_top.p2 ~ out\\n[](http://atopile.io/<#__codelineno-6-17>)  out ~ r_bottom.p1; r_bottom.p2 ~ bottom\\n\\n```\\n\\nNow you can build this project and get a voltage divider!\\nTip\\nThe generics library should be installed by default in `your-project/.ato/modules/generics` directory. If not, run `ato install generics`\\n Next  Creating an ato project  ⟨23⟩\\n ⟨52⟩  ⟨2⟩  ⟨3⟩\\n' references_markdown='\\n\\n## References\\n\\n⟨1⟩ http://atopile.io/<#getting-started>:  Skip to content \\n⟨2⟩ http://atopile.io/<https:/github.com/atopile/atopile>:  **GitHub** \\n⟨3⟩ http://atopile.io/<https:/twitter.com/atopile_io>:  **X** (Twitter) \\n⟨4⟩ http://atopile.io/<https:/www.youtube.com/@atopile_io>:  **YouTube** , or join us on \\n⟨5⟩ http://atopile.io/<https:/discord.gg/nkpC7wYRVw>:  **Discord** \\n⟨6⟩ http://atopile.io/<../.>:  **Click here to go to latest.** \\n⟨7⟩ http://atopile.io/assets/logo/ato_logo_256x256.png:  ![logo\\n⟨8⟩ http://atopile.io/<https:/docs.atopile.io/dev/>: dev\\n⟨9⟩ http://atopile.io/<https:/docs.atopile.io/0.2.69/>: 0.2.69\\n⟨10⟩ http://atopile.io/<.>:  Docs \\n⟨11⟩ http://atopile.io/<development/>:  Development \\n⟨12⟩ http://atopile.io/<https:/packages.atopile.io>:  Packages \\n⟨13⟩ http://atopile.io/<spin/>:  Example Projects \\n⟨14⟩ http://atopile.io/<blog/>:  Blog \\n⟨15⟩ http://atopile.io/<#overview>:  Overview  \\n⟨16⟩ http://atopile.io/<#installation>:  Installation  \\n⟨17⟩ http://atopile.io/<#atopile-compiler-with-uv-recommended>:  atopile compiler — with uv (recommended)  \\n⟨18⟩ http://atopile.io/<#atopile-compiler-for-development>:  atopile compiler — for development  \\n⟨19⟩ http://atopile.io/<#vscode-extension-extension-store>:  VSCode extension - extension store  \\n⟨20⟩ http://atopile.io/<#1-easy>:  1. - Easy  \\n⟨21⟩ http://atopile.io/<#2-harder>:  2. - Harder  \\n⟨22⟩ http://atopile.io/<#making-a-simple-circuit>:  Making a simple circuit  \\n⟨23⟩ http://atopile.io/<first_project/>:  Creating an ato project  \\n⟨24⟩ http://atopile.io/<config/>:  Project configuration  \\n⟨25⟩ http://atopile.io/<building/>:  Building your ato project  \\n⟨26⟩ http://atopile.io/<install/>:  Install dependencies  \\n⟨27⟩ http://atopile.io/<import/>:  Imports  \\n⟨28⟩ http://atopile.io/<types/>:  Basic types & Connections  \\n⟨29⟩ http://atopile.io/<class/>:  Class, subclass and replace  \\n⟨30⟩ http://atopile.io/<maths/>:  Units and tolerances, assertions and maths  \\n⟨31⟩ http://atopile.io/<component_selection/>:  Automatic selection of components  \\n⟨32⟩ http://atopile.io/<doc-strings/>:  Doc-strings  \\n⟨33⟩ http://atopile.io/<how-to/>:  How-Tos  \\n⟨34⟩ http://atopile.io/<view/>:  atopile viewer  \\n⟨35⟩ http://atopile.io/<kicad/>:  KiCAD layout  \\n⟨36⟩ http://atopile.io/<git/>:  Version control using git  \\n⟨37⟩ http://atopile.io/<ci/>:  Generation of build outputs  \\n⟨38⟩ http://atopile.io/<roadmap/>:  Roadmap  \\n⟨39⟩ http://atopile.io/<api/cli/>:  CLI  \\n⟨40⟩ http://atopile.io/<api/solver/>:  Solver  \\n⟨41⟩ http://atopile.io/<swoop/>:  Swoop  \\n⟨42⟩ http://atopile.io/<blog/archive/2024/>:  2024  \\n⟨43⟩ http://atopile.io/<blog/category/about-us/>:  About us  \\n⟨44⟩ http://atopile.io/<blog/category/future/>:  Future  \\n⟨45⟩ http://atopile.io/<blog/category/release/>:  Release  \\n⟨46⟩ http://atopile.io/<first_project/#with-ato-create-recommended>: ato create\\n⟨47⟩ http://atopile.io/<https:/www.youtube.com/watch?v=UBwlARJWZ40>: Layout reuse in atopile\\n⟨48⟩ http://atopile.io/<https:/pypi.org/project/atopile/>: python package\\n⟨49⟩ http://atopile.io/<https:/www.youtube.com/watch?v=7aeZLlA_VYA>: Getting started with atopile - get setup and build your first project from scratch\\n⟨50⟩ http://atopile.io/<https:/code.visualstudio.com>: VSCode\\n⟨51⟩ http://atopile.io/<#making-a-simple-circuit-your-projectato>: your-project.ato\\n⟨52⟩ http://atopile.io/<https:/discord.gg/XQ34te6NZN>: discord.gg -  \\n' fit_markdown='' fit_html=''",
  "generated_description": "**Atopile**: Redefining Electronic Circuit Design Through Code\n\nFounded in 2023 and part of Y Combinator's Batch W24, Atopile is making waves in the world of hardware design by introducing a language that connects software principles with electronic circuit design. Located in San Francisco and with a small but passionate team of three, Atopile focuses on one clear mission: to enable users to design electronics circuit boards through code instead of traditional graphical interfaces. \n\n### The Innovation\n\nUsing a language dubbed **ato**, Atopile allows designers to create circuit specifications that are not only human-readable but also version-controllable—similar to how software developers manage their code. This transformation means that users can benefit from software-level automation and reusability. By swapping point-and-click workflows for coding, Atopile empowers engineers to iterate quickly and share designs efficiently within communities.\n\nAtopile’s core offering—the electronics compiler—integrates seamlessly with existing tools. Developers can create their circuits, manage components, and export their designs for manufacturing with ease, ushering in a new level of sophistication in the field of electronics.\n\n### The Structure\n\n- **Website**: [atopile.io](http://atopile.io)\n- **GitHub**: [Atopile Repository](https://github.com/atopile/atopile)\n- **Social Links**: Engage with them on [Twitter](https://twitter.com/atopile_io), [YouTube](https://www.youtube.com/@atopile_io), and [Discord](https://discord.gg/nkpC7wYRVw).\n\n### Key Features\n\n1. **Open Source**: Their project is openly available on GitHub, welcoming contributions and collaboration from developers around the globe.\n2. **Automated Design**: The ato language streamlines the process of circuit creation, allowing designers to focus on innovation rather than repetitive tasks.\n3. **Community Driven**: With a modular approach, Atopile encourages sharing and leveraging community-built components, enhancing collaboration.\n4. **Version Control**: By using git and familiar project management strategies, teams can track changes and collaborate effectively.\n\n### Conclusion\n\nAtopile is at the frontier of a much-needed evolution in how we design electronics. By merging the best practices of software development with hardware design, they are setting a new standard for what it means to build electronic circuits. With their promising technology and open-source philosophy, they may not just change how we build circuits, but the very landscape of hardware innovation itself."
}